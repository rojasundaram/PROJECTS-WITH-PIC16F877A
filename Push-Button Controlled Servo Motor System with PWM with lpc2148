#include <LPC214x.h>   // 

#define BUTTON1 (1 << 10)  // Button 1 connected to P0.10
#define BUTTON2 (1 << 11)  // Button 2 connected to P0.11

void delay(unsigned int time);
void PWM_Init(void);
void Set_Servo_Angle(unsigned int angle);

int main(void) {
    unsigned int angle = 90;  // Initial angle of the servo (90 degrees)

    // Configure P0.10 and P0.11 as input for buttons
    IO0DIR &= ~(BUTTON1 | BUTTON2);  // Set P0.10 and P0.11 as input pins
    IO0PIN |= (BUTTON1 | BUTTON2);   // Enable internal pull-ups

    PWM_Init();  // Initialize PWM for servo control

    while (1) {
        // Check if Button 1 is pressed
        if (!(IO0PIN & BUTTON1)) {
            if (angle < 180) {       // Increment angle if it's below 180 degrees
                angle += 10;
                Set_Servo_Angle(angle);
            }
            delay(50000);           // Delay for debouncing
        }

        // Check if Button 2 is pressed
        if (!(IO0PIN & BUTTON2)) {
            if (angle > 0) {         // Decrement angle if it's above 0 degrees
                angle -= 10;
                Set_Servo_Angle(angle);
            }
            delay(50000);           // Delay for debouncing
        }
    }

    return 0;
}

void delay(unsigned int time) {
    unsigned int i, j;
    for (i = 0; i < time; i++) {
        for (j = 0; j < 500; j++) {
            __asm("NOP");  // Delay with no operation
        }
    }
}

// Function to initialize PWM on PWM1 (Pin P0.8)
void PWM_Init(void) {
    PINSEL0 |= (2 << 16);  // Configure P0.8 as PWM1
    PWMPCR = (1 << 9);     // Enable PWM1 output
    PWMMR0 = 20000;        // Set PWM period to 20ms (50Hz frequency)
    PWMMR1 = 1500;         // Initial pulse width of 1.5ms (90 degrees)
    PWMLER = (1 << 0) | (1 << 1); // Latch MR0 and MR1 values
    PWMTCR = (1 << 0) | (1 << 3); // Enable PWM and counter
}

// Function to set the servo angle using PWM
void Set_Servo_Angle(unsigned int angle) {
    unsigned int pulse_width;

    // Calculate pulse width for the given angle
    // Pulse width ranges from 1ms (0 degrees) to 2ms (180 degrees)
    pulse_width = 1000 + (angle * 1000) / 180;

    PWMMR1 = pulse_width;     // Update pulse width for PWM1
    PWMLER = (1 << 1);        // Latch updated MR1 value
}
