#include <healthmonitor.h>
#include<string.h>

#use i2c(master, SDA=pin_c4,SCL=pin_c3)

#define THRESHOLD 512  
unsigned int pulse_value = 0;      // ADC reading for the pulse sensor
unsigned int lastValue = 0;        // Stores last pulse value to detect rising edge
unsigned long currentTime = 0;     // Tracks current time in ms
unsigned long lastBeatTime = 0;    // Time when the last beat was detected
unsigned long bpm = 0;             // Calculated BPM
char mydata[5];                   // Array to store BPM display value

unsigned int dec_bcd(unsigned int data);
unsigned int bcd_dec(unsigned int data);

unsigned long millis(void) {
    return currentTime;           // Returns the simulated time in ms
}
#byte lcd = 0x06
#byte tlcd = 0x86

#bit rs = 0x08.0
#bit trs = 0x88.0

#bit en = 0x08.1
#bit ten = 0x88.1
#bit led=0x07.0
#bit tled=0x87.0

#byte adcon0=0x1f 
#byte adcon1=0x9f 
#byte adresh=0x1e 
#byte adresl=0x9e 
#bit go_done=0x1f.2 
void check_seconds_and_toggle_led() {
    int seconds;
    
    i2c_start();
    i2c_write(0xd0);        // RTC slave address with write bit
    i2c_write(0x00);        // Point to seconds register
    i2c_start();
    i2c_write(0xd1);        // RTC slave address with read bit
    seconds = bcd_dec(i2c_read(0)); // Read seconds in BCD, convert to decimal
    i2c_stop();

    if (seconds % 10 == 0) {
        led = 1;   // Turn on the LED every 10 seconds
    } else {
        led = 0;   // Turn off the LED otherwise
    }
}
void display(unsigned int a,unsigned int b) 
{ 
lcd=a;//lcd=portc 8 bit a must 8 bit 
rs=b;//b single 
en=1; 
delay_ms(10); 
en=0; 
delay_ms(10); 
} 
void main() 
{ 
led=tled=0;
char date[]="date:";
char time[]="time:";
unsigned int data; 

int a,b;
   unsigned int read_value=0,sec=0;
     i2c_start();
     i2c_write(0xd0);//slave address rtc=0xd0 +write bit
     i2c_write(0x00);//location address sec 
     i2c_write(dec_bcd(17));//dec 
     i2c_stop();
        i2c_start();
     i2c_write(0xd0);//slave address rtc=0xd0 +write bit
     i2c_write(0x01);//location address sec 
     i2c_write(dec_bcd(29));//dec 
     i2c_stop();
        i2c_start();
     i2c_write(0xd0);//slave address rtc=0xd0 +write bit
     i2c_write(0x02);//location address sec 
     i2c_write(dec_bcd(02));//dec 
     i2c_stop();
         check_seconds_and_toggle_led();

long int result,i,my_adresh=0;
   char my_data[15];
   long int temp;

char val[10],val1[10]; 
tlcd=0; 
trs=0; 
ten=0; 
   
   
display(0x0e,0); 
display(0x38,0); 
display(0x80,0); 
display('a',1); 

ADCON1=0X80; 
while(1) 
{ 
/*
for(int o=0;o<strlen(time);o++)
{
display(time[o],1);
}
//hour
  //paricular address sec 0x00 min 0x01
     i2c_start();
     i2c_write(0xd0);//slave address rtc=0xd0 +write bit
     i2c_write(0x02);//location address sec = particular address 
     i2c_start();
     i2c_write(0xd1);//slave address rtc=0xd1 +read bit
     read_value=i2c_read(0);
     
     sec=bcd_dec(read_value);
     /*
     a=sec/10;
     b=sec%10;
display(a+0x30,1);
display(b+0x30,1);
display(':',1);
     i2c_stop();
     delay_ms(500);
 //MINUTE    
      i2c_start();


i2c_start();
i2c_write(0xd0);
i2c_write(0x01);
i2c_start();
i2c_write(0xd1);
read_value=i2c_read(0);
sec=bcd_dec(read_value);
/*
a=sec/10;
b=sec%10;
display(a+0x30,1);
display(b+0x30,1);
display(':',1);

i2c_stop();
delay_ms(500);
//second

i2c_start();
i2c_write(0xd0);
i2c_write(0x00);
i2c_start();
i2c_write(0xd1);
read_value=i2c_read(0);
sec=bcd_dec(read_value);
/*
a=sec/10;
b=sec%10;

display(a+0x30,1);
display(b+0x30,1);


i2c_stop();
delay_ms(500);

*/

//channel 0 
ADCON0=0X00; 
ADCON0=0X00; 
ADCON0=0X01; 
delay_ms(10); 
GO_DONE=1; 
while(GO_DONE==1); 
       my_adresh=adresh;
       result=adresl|my_adresh<<8;//adresh size 8 bit <<8
       temp=(result*4.88281);
       temp=temp/10;
       display(0x80,0);
sprintf(my_data,"temp:%lu",temp);//int to string array
      // display(0x85,0);
       for(i=0;my_data[i]!='\0';i++)
       {
         display(my_data[i],1);
       }


//channel 1 
ADCON0=0X00; 
ADCON0=0X08; 
ADCON0=0X09; 
delay_ms(10); 
GO_DONE=1; 
while(GO_DONE==1); 
my_adresh=adresh;
      //adresh size 8 bit <<8 my_adresh=adresh;
       result=adresl|my_adresh<<8;

       //sprintf(my_data,"heart:%lu",result);
       
        if (result > THRESHOLD && lastValue <= THRESHOLD) {
            unsigned long interval = millis() - lastBeatTime;
            if (interval > 0) {
                bpm = 60000 / interval;  // Calculate BPM as beats per minute
            }
            lastBeatTime = millis();     // Update last beat time
        }
        lastValue = result;  
        
display(0xc0,0);//first col 
       sprintf(mydata, "%04lu", bpm);  // Convert bpm to string with 4 digits
       
        for (int i = 0; mydata[i] != '\0'; i++) {
            display(mydata[i], 1);      // Display BPM value
        }

       delay_ms(10);                  // Delay for stabilization
        currentTime += 10; 
        

}
}
unsigned int dec_bcd(unsigned int data)
{
   unsigned int result;
   result=(((data/10)<<4)+(data%10));
   return result;
}
 
unsigned int bcd_dec(unsigned int data)
{
   unsigned int result;
   result=(((data>>4)*10)+(data&0x0f));
   return result;
}
